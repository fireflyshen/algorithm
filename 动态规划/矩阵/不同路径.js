// 一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。

// 机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。

// 问总共有多少条不同的路径？

 

// 示例 1：


// 输入：m = 3, n = 7
// 输出：28
// 一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。

// 机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。

// 问总共有多少条不同的路径？


// 示例 1：

// 输入：m = 3, n = 7
// 输出：28


/**
 * @param {number} m
 * @param {number} n
 * @return {number}
 */
var uniquePaths = function(m, n) {
    const dp = Array(n).fill(1); // 初始化第一行，每个位置只有 1 条路径到达

    for (let i = 1; i < m; i++) { // 从第二行开始遍历
        for (let j = 1; j < n; j++) { // 从第二列开始遍历
            dp[j] += dp[j - 1]; // 当前位置的路径数 = 上方路径数 + 左边路径数
        }
    }

    return dp[n - 1]; // 返回右下角的路径数
};


